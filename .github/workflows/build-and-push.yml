name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/semiprime

jobs:
  build-and-push:
    name: Build and Push - ${{ matrix.service }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - api
          - frontend
          - worker

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine build context and dockerfile
        id: build-context
        run: |
          if [ "${{ matrix.service }}" = "api" ]; then
            echo "context=./api" >> $GITHUB_OUTPUT
            echo "dockerfile=./infra/dockerfiles/Dockerfile.api" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.service }}" = "frontend" ]; then
            echo "context=./frontend" >> $GITHUB_OUTPUT
            echo "dockerfile=./infra/dockerfiles/Dockerfile.frontend" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.service }}" = "worker" ]; then
            echo "context=./api" >> $GITHUB_OUTPUT
            echo "dockerfile=./infra/dockerfiles/Dockerfile.worker" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.build-context.outputs.context }}
          file: ${{ steps.build-context.outputs.dockerfile }}
          push: ${{ (github.event_name != 'pull_request') && (github.event.inputs.push_images != 'false') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Generate build summary
        if: matrix.service == 'api'
        run: |
          echo "## Docker Images Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Registry: \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Built and pushed the following images:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-api\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-worker\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-api:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-worker:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Start" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Update docker-compose.yml to use GHCR images" >> $GITHUB_STEP_SUMMARY
          echo "docker compose pull" >> $GITHUB_STEP_SUMMARY
          echo "docker compose up -d" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "## Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build Status: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-and-push.result }}" = "success" ]; then
            echo "✅ All images built successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build failed" >> $GITHUB_STEP_SUMMARY
          fi
