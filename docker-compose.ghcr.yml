version: '3.8'

services:
  frontend:
    image: ghcr.io/deenyoro/semiprime-frontend:latest
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8080}
    depends_on:
      - api

  api:
    image: ghcr.io/deenyoro/semiprime-api:latest
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://factor:factor_dev_password@db:5432/factordb}
      REDIS_URL: ${REDIS_URL:-redis://queue:6379/0}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://queue:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://queue:6379/1}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8080}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
    depends_on:
      - db
      - queue

  worker:
    image: ghcr.io/deenyoro/semiprime-worker:latest
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://factor:factor_dev_password@db:5432/factordb}
      REDIS_URL: ${REDIS_URL:-redis://queue:6379/0}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://queue:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://queue:6379/1}
    depends_on:
      - db
      - queue
      - cado-nfs
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "3.5"
          memory: 8G
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Allow worker to call docker exec

  db:
    image: postgres:18-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-factor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-factor_dev_password}
      POSTGRES_DB: ${POSTGRES_DB:-factordb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U factor"]
      interval: 5s
      timeout: 5s
      retries: 5

  queue:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  cado-nfs:
    image: registry.gitlab.inria.fr/cado-nfs/cado-nfs/factoring-full:latest
    platform: linux/amd64  # CADO-NFS official container
    container_name: cado-nfs
    volumes:
      - cado_workdir:/workdir
    healthcheck:
      test: ["CMD-SHELL", "test -f /usr/local/bin/cado-nfs.py && exit 0 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    # Keep container running
    command: tail -f /dev/null

volumes:
  postgres_data:
  redis_data:
  cado_workdir:
