version: "3.9"

services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: factor
      POSTGRES_PASSWORD: factor_dev_password
      POSTGRES_DB: factordb
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U factor"]
      interval: 5s
      timeout: 5s
      retries: 5

  queue:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  api:
    build:
      context: ./api
      dockerfile: ../infra/dockerfiles/Dockerfile.api
    platform: linux/amd64  # or linux/arm64 on M-chip
    depends_on:
      db:
        condition: service_healthy
      queue:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://factor:factor_dev_password@db:5432/factordb
      REDIS_URL: redis://queue:6379/0
      CELERY_BROKER_URL: redis://queue:6379/0
      CELERY_RESULT_BACKEND: redis://queue:6379/1
      API_HOST: 0.0.0.0
      API_PORT: 8080
      CORS_ORIGINS: http://localhost:3000,http://frontend:3000
    ports:
      - "8080:8080"
    volumes:
      - ./api:/app
      - uploads:/app/uploads
    command: uvicorn app.main:app --host 0.0.0.0 --port 8080 --reload

  worker:
    build:
      context: ./api
      dockerfile: ../infra/dockerfiles/Dockerfile.worker
    platform: linux/amd64  # or linux/arm64 on M-chip
    depends_on:
      db:
        condition: service_healthy
      queue:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://factor:factor_dev_password@db:5432/factordb
      REDIS_URL: redis://queue:6379/0
      CELERY_BROKER_URL: redis://queue:6379/0
      CELERY_RESULT_BACKEND: redis://queue:6379/1
    volumes:
      - ./api:/app
      - uploads:/app/uploads
    command: celery -A app.worker worker --loglevel=info --concurrency=4
    deploy:
      resources:
        limits:
          cpus: "6"
          memory: 8G

  frontend:
    build:
      context: ./frontend
      dockerfile: ../infra/dockerfiles/Dockerfile.frontend
    platform: linux/amd64  # or linux/arm64 on M-chip
    depends_on:
      - api
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_WS_URL: ws://localhost:8080
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

volumes:
  dbdata:
  uploads:
