version: "3.9"

services:
  db:
    image: postgres:18-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-factor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-factor_dev_password}
      POSTGRES_DB: ${POSTGRES_DB:-factordb}
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U factor"]
      interval: 5s
      timeout: 5s
      retries: 5

  queue:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  api:
    build:
      context: ./api
      dockerfile: ../infra/dockerfiles/Dockerfile.api
    platform: linux/amd64  # or linux/arm64 on M-chip
    depends_on:
      db:
        condition: service_healthy
      queue:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      API_HOST: ${API_HOST}
      API_PORT: ${API_PORT}
      CORS_ORIGINS: ${CORS_ORIGINS}
    ports:
      - "8080:8080"
    volumes:
      - ./api:/app
      - uploads:/app/uploads
    command: uvicorn app.main:app --host 0.0.0.0 --port 8080 --reload

  worker:
    build:
      context: ./api
      dockerfile: ../infra/dockerfiles/Dockerfile.worker
    platform: linux/amd64  # or linux/arm64 on M-chip
    depends_on:
      db:
        condition: service_healthy
      queue:
        condition: service_healthy
      cado-nfs:
        condition: service_started
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    volumes:
      - ./api:/app
      - uploads:/app/uploads
      - /var/run/docker.sock:/var/run/docker.sock  # Allow worker to call docker exec
    command: celery -A app.worker worker --loglevel=info --concurrency=4
    deploy:
      resources:
        limits:
          cpus: "3.5"
          memory: 8G

  frontend:
    build:
      context: ./frontend
      dockerfile: ../infra/dockerfiles/Dockerfile.frontend
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    platform: linux/amd64  # or linux/arm64 on M-chip
    depends_on:
      - api
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

  cado-nfs:
    image: registry.gitlab.inria.fr/cado-nfs/cado-nfs/factoring-full:latest
    platform: linux/amd64  # CADO-NFS official container
    container_name: cado-nfs
    volumes:
      - cado_workdir:/workdir
    healthcheck:
      test: ["CMD-SHELL", "test -f /usr/local/bin/cado-nfs.py && exit 0 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    # Keep container running
    command: tail -f /dev/null

volumes:
  dbdata:
  uploads:
  cado_workdir:
